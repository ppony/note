   1              		.cpu cortex-m23
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"retarget.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.comm	__stdout,104,4
  16              		.comm	__stdin,104,4
  17              		.section	.rodata
  18              		.align	2
  19              	.LC0:
  20 0000 496E2048 		.ascii	"In Hard Fault Handler\000"
  20      61726420 
  20      4661756C 
  20      74204861 
  20      6E646C65 
  21              		.section	.text.Hard_Fault_Handler,"ax",%progbits
  22              		.align	1
  23              		.global	Hard_Fault_Handler
  24              		.syntax unified
  25              		.code	16
  26              		.thumb_func
  27              		.fpu softvfp
  29              	Hard_Fault_Handler:
  30              	.LFB88:
  31              		.file 1 "../system/src/retarget.c"
   1:../system/src/retarget.c **** /**************************************************************************//**
   2:../system/src/retarget.c ****  * @file     retarget.c
   3:../system/src/retarget.c ****  * @version  V3.00
   4:../system/src/retarget.c ****  * $Revision: 1 $
   5:../system/src/retarget.c ****  * $Date: 16/07/07 7:50p $
   6:../system/src/retarget.c ****  * @brief    Debug Port and Semihost Setting Source File
   7:../system/src/retarget.c ****  *
   8:../system/src/retarget.c ****  * @note
   9:../system/src/retarget.c ****  * Copyright (C) 2011 Nuvoton Technology Corp. All rights reserved.
  10:../system/src/retarget.c ****  *
  11:../system/src/retarget.c ****  ******************************************************************************/
  12:../system/src/retarget.c **** 
  13:../system/src/retarget.c **** 
  14:../system/src/retarget.c **** #include <stdio.h>
  15:../system/src/retarget.c **** #include "TC8234.h"
  16:../system/src/retarget.c **** 
  17:../system/src/retarget.c **** #if defined ( __CC_ARM   )
  18:../system/src/retarget.c **** #if (__ARMCC_VERSION < 400000)
  19:../system/src/retarget.c **** #else
  20:../system/src/retarget.c **** /* Insist on keeping widthprec, to avoid X propagation by benign code in C-lib */
  21:../system/src/retarget.c **** #pragma import _printf_widthprec
  22:../system/src/retarget.c **** #endif
  23:../system/src/retarget.c **** #endif
  24:../system/src/retarget.c **** 
  25:../system/src/retarget.c **** /*-------------------------------------------------------------------------------------------------
  26:../system/src/retarget.c **** /* Global variables                                                                                
  27:../system/src/retarget.c **** /*-------------------------------------------------------------------------------------------------
  28:../system/src/retarget.c **** #if !(defined(__ICCARM__) && (__VER__ >= 6010000))
  29:../system/src/retarget.c **** # if (__ARMCC_VERSION < 6040000)
  30:../system/src/retarget.c **** struct __FILE
  31:../system/src/retarget.c **** {
  32:../system/src/retarget.c ****     int handle; /* Add whatever you need here */
  33:../system/src/retarget.c **** };
  34:../system/src/retarget.c **** # endif
  35:../system/src/retarget.c **** #endif
  36:../system/src/retarget.c **** FILE __stdout;
  37:../system/src/retarget.c **** FILE __stdin;
  38:../system/src/retarget.c **** 
  39:../system/src/retarget.c **** enum { r0, r1, r2, r3, r12, lr, pc, psr};
  40:../system/src/retarget.c **** 
  41:../system/src/retarget.c **** /**
  42:../system/src/retarget.c ****  * @brief       Hard fault handler
  43:../system/src/retarget.c ****  * @param[in]   stack pointer points to the dumped registers in SRAM
  44:../system/src/retarget.c ****  * @return      None
  45:../system/src/retarget.c ****  * @details     Replace while(1) at the end of this function with chip reset if WDT is not enabled 
  46:../system/src/retarget.c ****  */
  47:../system/src/retarget.c **** void Hard_Fault_Handler(uint32_t stack[])
  48:../system/src/retarget.c **** {
  32              		.loc 1 48 0
  33              		.cfi_startproc
  34              		@ args = 0, pretend = 0, frame = 8
  35              		@ frame_needed = 1, uses_anonymous_args = 0
  36 0000 80B5     		push	{r7, lr}
  37              	.LCFI0:
  38              		.cfi_def_cfa_offset 8
  39              		.cfi_offset 7, -8
  40              		.cfi_offset 14, -4
  41 0002 82B0     		sub	sp, sp, #8
  42              	.LCFI1:
  43              		.cfi_def_cfa_offset 16
  44 0004 00AF     		add	r7, sp, #0
  45              	.LCFI2:
  46              		.cfi_def_cfa_register 7
  47 0006 7860     		str	r0, [r7, #4]
  49:../system/src/retarget.c **** 	printf("In Hard Fault Handler\n");
  48              		.loc 1 49 0
  49 0008 024B     		ldr	r3, .L3
  50 000a 1800     		movs	r0, r3
  51 000c FFF7FEFF 		bl	puts
  52              	.L2:
  50:../system/src/retarget.c **** 
  51:../system/src/retarget.c ****     while(1);
  53              		.loc 1 51 0 discriminator 1
  54 0010 FEE7     		b	.L2
  55              	.L4:
  56 0012 C046     		.align	2
  57              	.L3:
  58 0014 00000000 		.word	.LC0
  59              		.cfi_endproc
  60              	.LFE88:
  62              		.section	.text.SendChar_ToUART,"ax",%progbits
  63              		.align	1
  64              		.global	SendChar_ToUART
  65              		.syntax unified
  66              		.code	16
  67              		.thumb_func
  68              		.fpu softvfp
  70              	SendChar_ToUART:
  71              	.LFB89:
  52:../system/src/retarget.c **** }
  53:../system/src/retarget.c **** 
  54:../system/src/retarget.c **** /*-------------------------------------------------------------------------------------------------
  55:../system/src/retarget.c **** /* Routine to write a char                                                                         
  56:../system/src/retarget.c **** /*-------------------------------------------------------------------------------------------------
  57:../system/src/retarget.c **** 
  58:../system/src/retarget.c **** #if defined(DEBUG_ENABLE_SEMIHOST)
  59:../system/src/retarget.c **** /* The static buffer is used to speed up the semihost */
  60:../system/src/retarget.c **** static char g_buf[16];
  61:../system/src/retarget.c **** static char g_buf_len = 0;
  62:../system/src/retarget.c **** 
  63:../system/src/retarget.c **** # if defined(__ICCARM__)
  64:../system/src/retarget.c **** 
  65:../system/src/retarget.c **** 
  66:../system/src/retarget.c **** void SH_End(void)
  67:../system/src/retarget.c **** {
  68:../system/src/retarget.c ****     asm("MOVS   R0,#1 \n"        //; Set return value to 1
  69:../system/src/retarget.c ****         "BX     lr    \n"            //; Return
  70:../system/src/retarget.c ****        );
  71:../system/src/retarget.c **** }
  72:../system/src/retarget.c **** 
  73:../system/src/retarget.c **** void SH_ICE(void)
  74:../system/src/retarget.c **** {
  75:../system/src/retarget.c ****   asm("CMP   R2,#0   \n"
  76:../system/src/retarget.c ****       "BEQ   SH_End  \n"
  77:../system/src/retarget.c ****       "STR   R0,[R2] \n"       //; Save the return value to *pn32Out_R0
  78:../system/src/retarget.c ****      );
  79:../system/src/retarget.c **** }
  80:../system/src/retarget.c **** 
  81:../system/src/retarget.c **** /**
  82:../system/src/retarget.c ****  *
  83:../system/src/retarget.c ****  * @brief      The function to process semihosted command
  84:../system/src/retarget.c ****  * @param[in]  n32In_R0  : semihost register 0
  85:../system/src/retarget.c ****  * @param[in]  n32In_R1  : semihost register 1
  86:../system/src/retarget.c ****  * @param[out] pn32Out_R0: semihost register 0
  87:../system/src/retarget.c ****  * @retval     0: No ICE debug
  88:../system/src/retarget.c ****  * @retval     1: ICE debug
  89:../system/src/retarget.c ****  *
  90:../system/src/retarget.c ****  */
  91:../system/src/retarget.c **** int32_t SH_DoCommand(int32_t n32In_R0, int32_t n32In_R1, int32_t *pn32Out_R0)
  92:../system/src/retarget.c **** {
  93:../system/src/retarget.c ****     asm("BKPT   0xAB   \n"       //; This instruction will cause ICE trap or system HardFault
  94:../system/src/retarget.c ****         "B      SH_ICE \n"
  95:../system/src/retarget.c ****         "SH_HardFault: \n"       //; Captured by HardFault
  96:../system/src/retarget.c ****         "MOVS   R0,#0  \n"       //; Set return value to 0
  97:../system/src/retarget.c ****         "BX     lr     \n"       //; Return
  98:../system/src/retarget.c ****         );
  99:../system/src/retarget.c **** 
 100:../system/src/retarget.c ****     return 1;                    //; Return 1 when it is trap by ICE
 101:../system/src/retarget.c **** }
 102:../system/src/retarget.c **** 
 103:../system/src/retarget.c **** /**
 104:../system/src/retarget.c ****  * @brief       Get LR value and branch to Hard_Fault_Handler function
 105:../system/src/retarget.c ****  * @param       None
 106:../system/src/retarget.c ****  * @return      None
 107:../system/src/retarget.c ****  * @details     This function is use to get LR value and branch to Hard_Fault_Handler function.
 108:../system/src/retarget.c ****  */
 109:../system/src/retarget.c **** void Get_LR_and_Branch(void)
 110:../system/src/retarget.c **** {
 111:../system/src/retarget.c ****     asm("MOV     R1, LR               \n" //; LR current value
 112:../system/src/retarget.c ****         "B       Hard_Fault_Handler   \n"
 113:../system/src/retarget.c ****        );
 114:../system/src/retarget.c **** }
 115:../system/src/retarget.c **** 
 116:../system/src/retarget.c **** /**
 117:../system/src/retarget.c ****  * @brief       Get MSP value and branch to Get_LR_and_Branch function
 118:../system/src/retarget.c ****  * @param       None
 119:../system/src/retarget.c ****  * @return      None
 120:../system/src/retarget.c ****  * @details     This function is use to get stack pointer value and branch to Get_LR_and_Branch fun
 121:../system/src/retarget.c ****  */
 122:../system/src/retarget.c **** void Stack_Use_MSP(void)
 123:../system/src/retarget.c **** {
 124:../system/src/retarget.c ****     asm("MRS     R0, MSP           \n" //; read MSP
 125:../system/src/retarget.c ****         "B       Get_LR_and_Branch \n"
 126:../system/src/retarget.c ****        );
 127:../system/src/retarget.c **** }
 128:../system/src/retarget.c **** 
 129:../system/src/retarget.c **** /**
 130:../system/src/retarget.c ****  * @brief       Get stack pointer value and branch to Get_LR_and_Branch function
 131:../system/src/retarget.c ****  * @param       None
 132:../system/src/retarget.c ****  * @return      None
 133:../system/src/retarget.c ****  * @details     This function is use to get stack pointer value and branch to Get_LR_and_Branch fun
 134:../system/src/retarget.c ****  */
 135:../system/src/retarget.c **** void HardFault_Handler_Ret(void)
 136:../system/src/retarget.c **** {
 137:../system/src/retarget.c ****     asm("MOVS    r0, #4                        \n"
 138:../system/src/retarget.c ****         "MOV     r1, LR                        \n"
 139:../system/src/retarget.c ****         "TST     r0, r1                        \n" //; check LR bit 2
 140:../system/src/retarget.c ****         "BEQ     Stack_Use_MSP                 \n" //; stack use MSP
 141:../system/src/retarget.c ****         "MRS     R0, PSP                       \n" //; stack use PSP, read PSP
 142:../system/src/retarget.c ****         "B       Get_LR_and_Branch             \n"
 143:../system/src/retarget.c ****        );
 144:../system/src/retarget.c **** }
 145:../system/src/retarget.c **** 
 146:../system/src/retarget.c **** /**
 147:../system/src/retarget.c ****  * @brief    This function is implemented to support semihost
 148:../system/src/retarget.c ****  * @param    None
 149:../system/src/retarget.c ****  * @returns  None
 150:../system/src/retarget.c ****  * @details  This function is implement to support semihost message print.
 151:../system/src/retarget.c ****  *
 152:../system/src/retarget.c ****  */
 153:../system/src/retarget.c **** void SP_Read_Ready(void)
 154:../system/src/retarget.c **** {
 155:../system/src/retarget.c ****     asm("LDR     R1, [R0, #24] \n"        //; Get previous PC
 156:../system/src/retarget.c ****         "LDRH    R3, [R1]      \n"        //; Get instruction
 157:../system/src/retarget.c ****         "LDR     R2, [pc, #8]  \n"        //; The special BKPT instruction
 158:../system/src/retarget.c ****         "CMP     R3, R2        \n"        //; Test if the instruction at previous PC is BKPT
 159:../system/src/retarget.c ****         "BNE     HardFault_Handler_Ret \n" //; Not BKPT
 160:../system/src/retarget.c ****         "ADDS    R1, #4        \n"        //; Skip BKPT and next line
 161:../system/src/retarget.c ****         "STR     R1, [R0, #24] \n"        //; Save previous PC
 162:../system/src/retarget.c ****         "BX      lr            \n"        //; Return
 163:../system/src/retarget.c ****         "DCD     0xBEAB        \n"        //; BKPT instruction code
 164:../system/src/retarget.c ****         "B       HardFault_Handler_Ret \n"
 165:../system/src/retarget.c ****        );
 166:../system/src/retarget.c **** }
 167:../system/src/retarget.c **** 
 168:../system/src/retarget.c **** /**
 169:../system/src/retarget.c ****  * @brief       Get stack pointer value and branch to Get_LR_and_Branch function
 170:../system/src/retarget.c ****  * @param       None
 171:../system/src/retarget.c ****  * @return      None
 172:../system/src/retarget.c ****  * @details     This function is use to get stack pointer value and branch to Get_LR_and_Branch fun
 173:../system/src/retarget.c ****  */
 174:../system/src/retarget.c **** void SP_is_PSP(void)
 175:../system/src/retarget.c **** {
 176:../system/src/retarget.c ****     asm(
 177:../system/src/retarget.c ****         "MRS     R0, PSP       \n"      //; stack use PSP, read PSP
 178:../system/src/retarget.c ****         "B       Get_LR_and_Branch    \n"
 179:../system/src/retarget.c ****     
 180:../system/src/retarget.c ****        );
 181:../system/src/retarget.c **** }
 182:../system/src/retarget.c **** 
 183:../system/src/retarget.c **** /**
 184:../system/src/retarget.c ****  * @brief    This HardFault handler is implemented to support semihost
 185:../system/src/retarget.c ****  *
 186:../system/src/retarget.c ****  * @param    None
 187:../system/src/retarget.c ****  *
 188:../system/src/retarget.c ****  * @returns  None
 189:../system/src/retarget.c ****  *
 190:../system/src/retarget.c ****  * @details  This function is implement to support semihost message print.
 191:../system/src/retarget.c ****  *
 192:../system/src/retarget.c ****  */
 193:../system/src/retarget.c **** void HardFault_Handler (void)
 194:../system/src/retarget.c **** {
 195:../system/src/retarget.c ****     asm("MOV     R0, lr        \n"
 196:../system/src/retarget.c ****         "LSLS    R0, #29       \n"        //; Check bit 2
 197:../system/src/retarget.c ****         "BMI     SP_is_PSP     \n"        //; previous stack is PSP
 198:../system/src/retarget.c ****         "MRS     R0, MSP       \n"        //; previous stack is MSP, read MSP
 199:../system/src/retarget.c ****         "B       SP_Read_Ready \n"
 200:../system/src/retarget.c ****        );
 201:../system/src/retarget.c **** 
 202:../system/src/retarget.c ****     while(1);
 203:../system/src/retarget.c **** }
 204:../system/src/retarget.c **** 
 205:../system/src/retarget.c **** 
 206:../system/src/retarget.c **** # else // defined(__ICCARM__)
 207:../system/src/retarget.c **** 
 208:../system/src/retarget.c **** 
 209:../system/src/retarget.c **** # endif 
 210:../system/src/retarget.c ****  
 211:../system/src/retarget.c **** #else // defined(DEBUG_ENABLE_SEMIHOST)
 212:../system/src/retarget.c **** 
 213:../system/src/retarget.c **** # if defined(__ICCARM__)
 214:../system/src/retarget.c **** 
 215:../system/src/retarget.c **** void Get_LR_and_Branch(void)
 216:../system/src/retarget.c **** {
 217:../system/src/retarget.c ****     asm("MOV     R1, LR                  \n" //; LR current value
 218:../system/src/retarget.c ****         "B       Hard_Fault_Handler      \n"
 219:../system/src/retarget.c ****        );
 220:../system/src/retarget.c **** }
 221:../system/src/retarget.c **** 
 222:../system/src/retarget.c **** void Stack_Use_MSP(void)
 223:../system/src/retarget.c **** {
 224:../system/src/retarget.c ****     asm("MRS     R0, MSP           \n" //; read MSP
 225:../system/src/retarget.c ****         "B       Get_LR_and_Branch \n"
 226:../system/src/retarget.c ****        );
 227:../system/src/retarget.c **** }
 228:../system/src/retarget.c **** 
 229:../system/src/retarget.c **** /**
 230:../system/src/retarget.c ****  * @brief    This HardFault handler is implemented to show r0, r1, r2, r3, r12, lr, pc, psr
 231:../system/src/retarget.c ****  *
 232:../system/src/retarget.c ****  * @param    None
 233:../system/src/retarget.c ****  *
 234:../system/src/retarget.c ****  * @returns  None
 235:../system/src/retarget.c ****  *
 236:../system/src/retarget.c ****  * @details  This function is implement to print r0, r1, r2, r3, r12, lr, pc, psr.
 237:../system/src/retarget.c ****  *
 238:../system/src/retarget.c ****  */
 239:../system/src/retarget.c **** void HardFault_Handler(void)
 240:../system/src/retarget.c **** {
 241:../system/src/retarget.c ****     asm("MOVS    r0, #4                        \n"
 242:../system/src/retarget.c ****         "MOV     r1, LR                        \n"
 243:../system/src/retarget.c ****         "TST     r0, r1                        \n" //; check LR bit 2
 244:../system/src/retarget.c ****         "BEQ     Stack_Use_MSP                 \n" //; stack use MSP
 245:../system/src/retarget.c ****         "MRS     R0, PSP                       \n" //; stack use PSP, read PSP
 246:../system/src/retarget.c ****         "B       Get_LR_and_Branch             \n"
 247:../system/src/retarget.c ****        );
 248:../system/src/retarget.c **** 
 249:../system/src/retarget.c ****     while(1);
 250:../system/src/retarget.c **** }
 251:../system/src/retarget.c **** 
 252:../system/src/retarget.c **** # else // defined(__ICCARM__)
 253:../system/src/retarget.c **** 
 254:../system/src/retarget.c **** # if 0 //(__ARMCC_VERSION < 6040000)
 255:../system/src/retarget.c **** 
 256:../system/src/retarget.c **** /**
 257:../system/src/retarget.c ****  * @brief    This HardFault handler is implemented to show r0, r1, r2, r3, r12, lr, pc, psr
 258:../system/src/retarget.c ****  *
 259:../system/src/retarget.c ****  * @param    None
 260:../system/src/retarget.c ****  *
 261:../system/src/retarget.c ****  * @return   None
 262:../system/src/retarget.c ****  *
 263:../system/src/retarget.c ****  * @details  The function extracts the location of stack frame and passes it to Hard_Fault_Handler 
 264:../system/src/retarget.c ****  *
 265:../system/src/retarget.c ****  */
 266:../system/src/retarget.c **** __asm int32_t HardFault_Handler(void)
 267:../system/src/retarget.c **** {
 268:../system/src/retarget.c ****     MOVS    r0, #4  
 269:../system/src/retarget.c ****     MOV     r1, LR
 270:../system/src/retarget.c ****     TST     r0, r1          //; check LR bit 2                 
 271:../system/src/retarget.c ****     BEQ     Stack_Use_MSP   //; stack use MSP
 272:../system/src/retarget.c ****     MRS     R0, PSP         //; stack use PSP, read PSP
 273:../system/src/retarget.c ****     B       Get_LR_and_Branch
 274:../system/src/retarget.c **** Stack_Use_MSP
 275:../system/src/retarget.c ****     MRS     R0, MSP         //; read MSP
 276:../system/src/retarget.c **** Get_LR_and_Branch
 277:../system/src/retarget.c ****     MOV     R1, LR          //; LR current value
 278:../system/src/retarget.c ****     LDR     R2,=__cpp(Hard_Fault_Handler) //; branch to Hard_Fault_Handler 
 279:../system/src/retarget.c ****     BX      R2
 280:../system/src/retarget.c **** }
 281:../system/src/retarget.c **** # endif 
 282:../system/src/retarget.c **** # endif // defined(__ICCARM__)
 283:../system/src/retarget.c **** 
 284:../system/src/retarget.c **** #endif // defined(DEBUG_ENABLE_SEMIHOST)
 285:../system/src/retarget.c **** 
 286:../system/src/retarget.c **** 
 287:../system/src/retarget.c **** /**
 288:../system/src/retarget.c ****  * @brief    Routine to send a char
 289:../system/src/retarget.c ****  *
 290:../system/src/retarget.c ****  * @param[in] ch  A character data writes to debug port
 291:../system/src/retarget.c ****  *
 292:../system/src/retarget.c ****  * @returns  Send value from UART debug port
 293:../system/src/retarget.c ****  *
 294:../system/src/retarget.c ****  * @details  Send a target char to UART debug port .
 295:../system/src/retarget.c ****  */
 296:../system/src/retarget.c **** #ifndef NONBLOCK_PRINTF
 297:../system/src/retarget.c **** void SendChar_ToUART(int ch)
 298:../system/src/retarget.c **** {
  72              		.loc 1 298 0
  73              		.cfi_startproc
  74              		@ args = 0, pretend = 0, frame = 8
  75              		@ frame_needed = 1, uses_anonymous_args = 0
  76 0000 80B5     		push	{r7, lr}
  77              	.LCFI3:
  78              		.cfi_def_cfa_offset 8
  79              		.cfi_offset 7, -8
  80              		.cfi_offset 14, -4
  81 0002 82B0     		sub	sp, sp, #8
  82              	.LCFI4:
  83              		.cfi_def_cfa_offset 16
  84 0004 00AF     		add	r7, sp, #0
  85              	.LCFI5:
  86              		.cfi_def_cfa_register 7
  87 0006 7860     		str	r0, [r7, #4]
 299:../system/src/retarget.c **** 
 300:../system/src/retarget.c ****     while(DEBUG_PORT->FIFOSTS & UART_FIFOSTS_TXFULL_Msk);
  88              		.loc 1 300 0
  89 0008 C046     		nop
  90              	.L6:
  91              		.loc 1 300 0 is_stmt 0 discriminator 1
  92 000a 0E4B     		ldr	r3, .L10
  93 000c 9A69     		ldr	r2, [r3, #24]
  94 000e 8023     		movs	r3, #128
  95 0010 1B04     		lsls	r3, r3, #16
  96 0012 1340     		ands	r3, r2
  97 0014 002B     		cmp	r3, #0
  98 0016 F8D1     		bne	.L6
 301:../system/src/retarget.c ****     DEBUG_PORT->DAT = ch;
  99              		.loc 1 301 0 is_stmt 1
 100 0018 0A4B     		ldr	r3, .L10
 101 001a 7A68     		ldr	r2, [r7, #4]
 102 001c 1A60     		str	r2, [r3]
 302:../system/src/retarget.c ****     if(ch == '\n')
 103              		.loc 1 302 0
 104 001e 7B68     		ldr	r3, [r7, #4]
 105 0020 0A2B     		cmp	r3, #10
 106 0022 0AD1     		bne	.L9
 303:../system/src/retarget.c ****     {
 304:../system/src/retarget.c ****         while(DEBUG_PORT->FIFOSTS & UART_FIFOSTS_TXFULL_Msk);
 107              		.loc 1 304 0
 108 0024 C046     		nop
 109              	.L8:
 110              		.loc 1 304 0 is_stmt 0 discriminator 1
 111 0026 074B     		ldr	r3, .L10
 112 0028 9A69     		ldr	r2, [r3, #24]
 113 002a 8023     		movs	r3, #128
 114 002c 1B04     		lsls	r3, r3, #16
 115 002e 1340     		ands	r3, r2
 116 0030 002B     		cmp	r3, #0
 117 0032 F8D1     		bne	.L8
 305:../system/src/retarget.c ****         DEBUG_PORT->DAT = '\r';
 118              		.loc 1 305 0 is_stmt 1
 119 0034 034B     		ldr	r3, .L10
 120 0036 0D22     		movs	r2, #13
 121 0038 1A60     		str	r2, [r3]
 122              	.L9:
 306:../system/src/retarget.c ****     }
 307:../system/src/retarget.c **** }
 123              		.loc 1 307 0
 124 003a C046     		nop
 125 003c BD46     		mov	sp, r7
 126 003e 02B0     		add	sp, sp, #8
 127              		@ sp needed
 128 0040 80BD     		pop	{r7, pc}
 129              	.L11:
 130 0042 C046     		.align	2
 131              	.L10:
 132 0044 00000750 		.word	1342636032
 133              		.cfi_endproc
 134              	.LFE89:
 136              		.section	.text._write,"ax",%progbits
 137              		.align	1
 138              		.global	_write
 139              		.syntax unified
 140              		.code	16
 141              		.thumb_func
 142              		.fpu softvfp
 144              	_write:
 145              	.LFB90:
 308:../system/src/retarget.c **** 
 309:../system/src/retarget.c **** #else
 310:../system/src/retarget.c **** /* Non-block implement of send char */
 311:../system/src/retarget.c **** # define BUF_SIZE    512
 312:../system/src/retarget.c **** void SendChar_ToUART(int ch)
 313:../system/src/retarget.c **** {
 314:../system/src/retarget.c ****     static uint8_t u8Buf[BUF_SIZE] = {0};
 315:../system/src/retarget.c ****     static int32_t i32Head = 0;
 316:../system/src/retarget.c ****     static int32_t i32Tail = 0;
 317:../system/src/retarget.c ****     int32_t i32Tmp;
 318:../system/src/retarget.c ****     
 319:../system/src/retarget.c ****     /* Only flush the data in buffer to UART when ch == 0 */
 320:../system/src/retarget.c ****     if(ch)
 321:../system/src/retarget.c ****     {
 322:../system/src/retarget.c ****         // Push char
 323:../system/src/retarget.c ****         i32Tmp = i32Head+1;
 324:../system/src/retarget.c ****         if(i32Tmp > BUF_SIZE) i32Tmp = 0;
 325:../system/src/retarget.c ****         if(i32Tmp != i32Tail)
 326:../system/src/retarget.c ****         {
 327:../system/src/retarget.c ****             u8Buf[i32Head] = ch;
 328:../system/src/retarget.c ****             i32Head = i32Tmp;
 329:../system/src/retarget.c ****         }
 330:../system/src/retarget.c ****         
 331:../system/src/retarget.c ****         if(ch == '\n')
 332:../system/src/retarget.c ****         {
 333:../system/src/retarget.c ****             i32Tmp = i32Head+1;
 334:../system/src/retarget.c ****             if(i32Tmp > BUF_SIZE) i32Tmp = 0;
 335:../system/src/retarget.c ****             if(i32Tmp != i32Tail)
 336:../system/src/retarget.c ****             {
 337:../system/src/retarget.c ****                 u8Buf[i32Head] = '\r';
 338:../system/src/retarget.c ****                 i32Head = i32Tmp;
 339:../system/src/retarget.c ****             }
 340:../system/src/retarget.c ****         }
 341:../system/src/retarget.c ****     }
 342:../system/src/retarget.c ****     else
 343:../system/src/retarget.c ****     {
 344:../system/src/retarget.c ****         if(i32Tail == i32Head)
 345:../system/src/retarget.c ****             return;
 346:../system/src/retarget.c ****     }
 347:../system/src/retarget.c ****     
 348:../system/src/retarget.c ****     // pop char
 349:../system/src/retarget.c ****     do
 350:../system/src/retarget.c ****     {
 351:../system/src/retarget.c ****         i32Tmp = i32Tail + 1;
 352:../system/src/retarget.c ****         if(i32Tmp > BUF_SIZE) i32Tmp = 0;
 353:../system/src/retarget.c ****         
 354:../system/src/retarget.c ****         if((DEBUG_PORT->FSR & UART_FSR_TX_FULL_Msk) == 0)
 355:../system/src/retarget.c ****         {
 356:../system/src/retarget.c ****             DEBUG_PORT->DATA = u8Buf[i32Tail];
 357:../system/src/retarget.c ****             i32Tail = i32Tmp;
 358:../system/src/retarget.c ****         }
 359:../system/src/retarget.c ****         else
 360:../system/src/retarget.c ****             break; // FIFO full
 361:../system/src/retarget.c ****     }while(i32Tail != i32Head);
 362:../system/src/retarget.c **** }
 363:../system/src/retarget.c **** #endif
 364:../system/src/retarget.c **** 
 365:../system/src/retarget.c **** int _write(int file, char *ptr, int len)
 366:../system/src/retarget.c **** {
 146              		.loc 1 366 0
 147              		.cfi_startproc
 148              		@ args = 0, pretend = 0, frame = 24
 149              		@ frame_needed = 1, uses_anonymous_args = 0
 150 0000 80B5     		push	{r7, lr}
 151              	.LCFI6:
 152              		.cfi_def_cfa_offset 8
 153              		.cfi_offset 7, -8
 154              		.cfi_offset 14, -4
 155 0002 86B0     		sub	sp, sp, #24
 156              	.LCFI7:
 157              		.cfi_def_cfa_offset 32
 158 0004 00AF     		add	r7, sp, #0
 159              	.LCFI8:
 160              		.cfi_def_cfa_register 7
 161 0006 F860     		str	r0, [r7, #12]
 162 0008 B960     		str	r1, [r7, #8]
 163 000a 7A60     		str	r2, [r7, #4]
 367:../system/src/retarget.c ****     int i;
 368:../system/src/retarget.c **** 
 369:../system/src/retarget.c ****     file = file;
 370:../system/src/retarget.c ****     for (i = 0; i < len; i++)
 164              		.loc 1 370 0
 165 000c 0023     		movs	r3, #0
 166 000e 7B61     		str	r3, [r7, #20]
 167 0010 0AE0     		b	.L13
 168              	.L14:
 371:../system/src/retarget.c ****     {
 372:../system/src/retarget.c ****         SendChar_ToUART(*ptr++);
 169              		.loc 1 372 0 discriminator 3
 170 0012 BB68     		ldr	r3, [r7, #8]
 171 0014 5A1C     		adds	r2, r3, #1
 172 0016 BA60     		str	r2, [r7, #8]
 173 0018 1B78     		ldrb	r3, [r3]
 174 001a 5BB2     		sxtb	r3, r3
 175 001c 1800     		movs	r0, r3
 176 001e FFF7FEFF 		bl	SendChar_ToUART
 370:../system/src/retarget.c ****     {
 177              		.loc 1 370 0 discriminator 3
 178 0022 7B69     		ldr	r3, [r7, #20]
 179 0024 0133     		adds	r3, r3, #1
 180 0026 7B61     		str	r3, [r7, #20]
 181              	.L13:
 370:../system/src/retarget.c ****     {
 182              		.loc 1 370 0 is_stmt 0 discriminator 1
 183 0028 7A69     		ldr	r2, [r7, #20]
 184 002a 7B68     		ldr	r3, [r7, #4]
 185 002c 9A42     		cmp	r2, r3
 186 002e F0DB     		blt	.L14
 373:../system/src/retarget.c ****         //SH_DoCommand(0x04, *ptr++, NULL);
 374:../system/src/retarget.c ****     }
 375:../system/src/retarget.c ****     return len;
 187              		.loc 1 375 0 is_stmt 1
 188 0030 7B68     		ldr	r3, [r7, #4]
 376:../system/src/retarget.c **** }
 189              		.loc 1 376 0
 190 0032 1800     		movs	r0, r3
 191 0034 BD46     		mov	sp, r7
 192 0036 06B0     		add	sp, sp, #24
 193              		@ sp needed
 194 0038 80BD     		pop	{r7, pc}
 195              		.cfi_endproc
 196              	.LFE90:
 198              		.section	.text._read,"ax",%progbits
 199              		.align	1
 200              		.global	_read
 201              		.syntax unified
 202              		.code	16
 203              		.thumb_func
 204              		.fpu softvfp
 206              	_read:
 207              	.LFB91:
 377:../system/src/retarget.c **** 
 378:../system/src/retarget.c **** int _read(int file, char *ptr, int len) 
 379:../system/src/retarget.c **** {
 208              		.loc 1 379 0
 209              		.cfi_startproc
 210              		@ args = 0, pretend = 0, frame = 24
 211              		@ frame_needed = 1, uses_anonymous_args = 0
 212 0000 80B5     		push	{r7, lr}
 213              	.LCFI9:
 214              		.cfi_def_cfa_offset 8
 215              		.cfi_offset 7, -8
 216              		.cfi_offset 14, -4
 217 0002 86B0     		sub	sp, sp, #24
 218              	.LCFI10:
 219              		.cfi_def_cfa_offset 32
 220 0004 00AF     		add	r7, sp, #0
 221              	.LCFI11:
 222              		.cfi_def_cfa_register 7
 223 0006 F860     		str	r0, [r7, #12]
 224 0008 B960     		str	r1, [r7, #8]
 225 000a 7A60     		str	r2, [r7, #4]
 380:../system/src/retarget.c ****     int i;
 381:../system/src/retarget.c **** 
 382:../system/src/retarget.c ****     if(len == 0)
 226              		.loc 1 382 0
 227 000c 7B68     		ldr	r3, [r7, #4]
 228 000e 0BB9     		cbnz	r3, .L25
 383:../system/src/retarget.c ****         return 0;
 229              		.loc 1 383 0
 230 0010 0023     		movs	r3, #0
 231 0012 28E0     		b	.L18
 232              	.L25:
 384:../system/src/retarget.c **** 
 385:../system/src/retarget.c ****     while((DEBUG_PORT->FIFOSTS & UART_FIFOSTS_RXEMPTY_Msk) != 0);
 233              		.loc 1 385 0
 234 0014 C046     		nop
 235              	.L19:
 236              		.loc 1 385 0 is_stmt 0 discriminator 1
 237 0016 164B     		ldr	r3, .L26
 238 0018 9B69     		ldr	r3, [r3, #24]
 239 001a 44F20002 		movw	r2, #16384
 240 001e 1340     		ands	r3, r2
 241 0020 002B     		cmp	r3, #0
 242 0022 F8D1     		bne	.L19
 386:../system/src/retarget.c ****     *ptr++ = (DEBUG_PORT->DAT);
 243              		.loc 1 386 0 is_stmt 1
 244 0024 BB68     		ldr	r3, [r7, #8]
 245 0026 5A1C     		adds	r2, r3, #1
 246 0028 BA60     		str	r2, [r7, #8]
 247 002a 114A     		ldr	r2, .L26
 248 002c 1268     		ldr	r2, [r2]
 249 002e 52B2     		sxtb	r2, r2
 250 0030 1A70     		strb	r2, [r3]
 387:../system/src/retarget.c **** 
 388:../system/src/retarget.c ****     for(i = 1; i < len; i++) 
 251              		.loc 1 388 0
 252 0032 0123     		movs	r3, #1
 253 0034 7B61     		str	r3, [r7, #20]
 254 0036 0FE0     		b	.L20
 255              	.L23:
 389:../system/src/retarget.c ****     {
 390:../system/src/retarget.c ****         if((DEBUG_PORT->FIFOSTS & UART_FIFOSTS_RXEMPTY_Msk) != 0) {
 256              		.loc 1 390 0
 257 0038 0D4B     		ldr	r3, .L26
 258 003a 9B69     		ldr	r3, [r3, #24]
 259 003c 44F20002 		movw	r2, #16384
 260 0040 1340     		ands	r3, r2
 261 0042 73B9     		cbnz	r3, .L24
 391:../system/src/retarget.c ****             break;
 392:../system/src/retarget.c ****         }
 393:../system/src/retarget.c ****         *ptr++ = (DEBUG_PORT->DAT);
 262              		.loc 1 393 0 discriminator 2
 263 0044 BB68     		ldr	r3, [r7, #8]
 264 0046 5A1C     		adds	r2, r3, #1
 265 0048 BA60     		str	r2, [r7, #8]
 266 004a 094A     		ldr	r2, .L26
 267 004c 1268     		ldr	r2, [r2]
 268 004e 52B2     		sxtb	r2, r2
 269 0050 1A70     		strb	r2, [r3]
 388:../system/src/retarget.c ****     {
 270              		.loc 1 388 0 discriminator 2
 271 0052 7B69     		ldr	r3, [r7, #20]
 272 0054 0133     		adds	r3, r3, #1
 273 0056 7B61     		str	r3, [r7, #20]
 274              	.L20:
 388:../system/src/retarget.c ****     {
 275              		.loc 1 388 0 is_stmt 0 discriminator 1
 276 0058 7A69     		ldr	r2, [r7, #20]
 277 005a 7B68     		ldr	r3, [r7, #4]
 278 005c 9A42     		cmp	r2, r3
 279 005e EBDB     		blt	.L23
 280 0060 00E0     		b	.L22
 281              	.L24:
 391:../system/src/retarget.c ****             break;
 282              		.loc 1 391 0 is_stmt 1
 283 0062 C046     		nop
 284              	.L22:
 394:../system/src/retarget.c ****     }
 395:../system/src/retarget.c ****     return i;
 285              		.loc 1 395 0
 286 0064 7B69     		ldr	r3, [r7, #20]
 287              	.L18:
 396:../system/src/retarget.c **** }
 288              		.loc 1 396 0
 289 0066 1800     		movs	r0, r3
 290 0068 BD46     		mov	sp, r7
 291 006a 06B0     		add	sp, sp, #24
 292              		@ sp needed
 293 006c 80BD     		pop	{r7, pc}
 294              	.L27:
 295 006e C046     		.align	2
 296              	.L26:
 297 0070 00000750 		.word	1342636032
 298              		.cfi_endproc
 299              	.LFE91:
 301              		.section	.text.SendChar,"ax",%progbits
 302              		.align	1
 303              		.global	SendChar
 304              		.syntax unified
 305              		.code	16
 306              		.thumb_func
 307              		.fpu softvfp
 309              	SendChar:
 310              	.LFB92:
 397:../system/src/retarget.c **** 
 398:../system/src/retarget.c **** /**
 399:../system/src/retarget.c ****  * @brief    Routine to send a char
 400:../system/src/retarget.c ****  *
 401:../system/src/retarget.c ****  * @param[in] ch A character data writes to debug port
 402:../system/src/retarget.c ****  *
 403:../system/src/retarget.c ****  * @returns  Send value from UART debug port or semihost
 404:../system/src/retarget.c ****  *
 405:../system/src/retarget.c ****  * @details  Send a target char to UART debug port or semihost.
 406:../system/src/retarget.c ****  */
 407:../system/src/retarget.c **** void SendChar(int ch)
 408:../system/src/retarget.c **** {
 311              		.loc 1 408 0
 312              		.cfi_startproc
 313              		@ args = 0, pretend = 0, frame = 8
 314              		@ frame_needed = 1, uses_anonymous_args = 0
 315 0000 80B5     		push	{r7, lr}
 316              	.LCFI12:
 317              		.cfi_def_cfa_offset 8
 318              		.cfi_offset 7, -8
 319              		.cfi_offset 14, -4
 320 0002 82B0     		sub	sp, sp, #8
 321              	.LCFI13:
 322              		.cfi_def_cfa_offset 16
 323 0004 00AF     		add	r7, sp, #0
 324              	.LCFI14:
 325              		.cfi_def_cfa_register 7
 326 0006 7860     		str	r0, [r7, #4]
 409:../system/src/retarget.c **** #if defined(DEBUG_ENABLE_SEMIHOST)
 410:../system/src/retarget.c ****     g_buf[g_buf_len++] = ch;
 411:../system/src/retarget.c ****     g_buf[g_buf_len] = '\0';
 412:../system/src/retarget.c ****     if(g_buf_len + 1 >= sizeof(g_buf) || ch == '\n' || ch == '\0')
 413:../system/src/retarget.c ****     {
 414:../system/src/retarget.c ****         /* Send the char */
 415:../system/src/retarget.c ****         if(SH_DoCommand(0x04, (int)g_buf, NULL) != 0)
 416:../system/src/retarget.c ****         {
 417:../system/src/retarget.c ****             g_buf_len = 0;
 418:../system/src/retarget.c ****             return;
 419:../system/src/retarget.c ****         }
 420:../system/src/retarget.c ****         else
 421:../system/src/retarget.c ****         {
 422:../system/src/retarget.c ****             int i;
 423:../system/src/retarget.c **** 
 424:../system/src/retarget.c ****             for(i = 0; i < g_buf_len; i++)
 425:../system/src/retarget.c ****                 SendChar_ToUART(g_buf[i]);
 426:../system/src/retarget.c ****             g_buf_len = 0;
 427:../system/src/retarget.c ****         }
 428:../system/src/retarget.c ****     }
 429:../system/src/retarget.c **** #else
 430:../system/src/retarget.c ****     SendChar_ToUART(ch);
 327              		.loc 1 430 0
 328 0008 7B68     		ldr	r3, [r7, #4]
 329 000a 1800     		movs	r0, r3
 330 000c FFF7FEFF 		bl	SendChar_ToUART
 431:../system/src/retarget.c **** #endif
 432:../system/src/retarget.c **** }
 331              		.loc 1 432 0
 332 0010 C046     		nop
 333 0012 BD46     		mov	sp, r7
 334 0014 02B0     		add	sp, sp, #8
 335              		@ sp needed
 336 0016 80BD     		pop	{r7, pc}
 337              		.cfi_endproc
 338              	.LFE92:
 340              		.section	.text.GetChar,"ax",%progbits
 341              		.align	1
 342              		.global	GetChar
 343              		.syntax unified
 344              		.code	16
 345              		.thumb_func
 346              		.fpu softvfp
 348              	GetChar:
 349              	.LFB93:
 433:../system/src/retarget.c **** 
 434:../system/src/retarget.c **** /**
 435:../system/src/retarget.c ****  * @brief    Routine to get a char
 436:../system/src/retarget.c ****  *
 437:../system/src/retarget.c ****  * @param    None
 438:../system/src/retarget.c ****  *
 439:../system/src/retarget.c ****  * @returns  Get value from UART debug port or semihost
 440:../system/src/retarget.c ****  *
 441:../system/src/retarget.c ****  * @details  Wait UART debug port or semihost to input a char.
 442:../system/src/retarget.c ****  */
 443:../system/src/retarget.c **** char GetChar(void)
 444:../system/src/retarget.c **** {
 350              		.loc 1 444 0
 351              		.cfi_startproc
 352              		@ args = 0, pretend = 0, frame = 0
 353              		@ frame_needed = 1, uses_anonymous_args = 0
 354 0000 80B5     		push	{r7, lr}
 355              	.LCFI15:
 356              		.cfi_def_cfa_offset 8
 357              		.cfi_offset 7, -8
 358              		.cfi_offset 14, -4
 359 0002 00AF     		add	r7, sp, #0
 360              	.LCFI16:
 361              		.cfi_def_cfa_register 7
 362              	.L32:
 445:../system/src/retarget.c **** #ifdef DEBUG_ENABLE_SEMIHOST
 446:../system/src/retarget.c **** # if defined (__CC_ARM)
 447:../system/src/retarget.c ****     int nRet;
 448:../system/src/retarget.c ****     while(SH_DoCommand(0x101, 0, &nRet) != 0)
 449:../system/src/retarget.c ****     {
 450:../system/src/retarget.c ****         if(nRet != 0)
 451:../system/src/retarget.c ****         {
 452:../system/src/retarget.c ****             SH_DoCommand(0x07, 0, &nRet);
 453:../system/src/retarget.c ****             return (char)nRet;
 454:../system/src/retarget.c ****         }
 455:../system/src/retarget.c ****     }
 456:../system/src/retarget.c **** # else
 457:../system/src/retarget.c ****     int nRet;
 458:../system/src/retarget.c ****     while(SH_DoCommand(0x7, 0, &nRet) != 0)
 459:../system/src/retarget.c ****     {
 460:../system/src/retarget.c ****         if(nRet != 0)
 461:../system/src/retarget.c ****             return (char)nRet;
 462:../system/src/retarget.c ****     }
 463:../system/src/retarget.c **** # endif
 464:../system/src/retarget.c ****     return (0);
 465:../system/src/retarget.c **** #else
 466:../system/src/retarget.c **** 
 467:../system/src/retarget.c ****     while(1)
 468:../system/src/retarget.c ****     {
 469:../system/src/retarget.c ****         if((DEBUG_PORT->FIFOSTS & UART_FIFOSTS_RXEMPTY_Msk) == 0)
 363              		.loc 1 469 0
 364 0004 064B     		ldr	r3, .L34
 365 0006 9B69     		ldr	r3, [r3, #24]
 366 0008 44F20002 		movw	r2, #16384
 367 000c 1340     		ands	r3, r2
 368 000e 002B     		cmp	r3, #0
 369 0010 F8D1     		bne	.L32
 470:../system/src/retarget.c ****         {
 471:../system/src/retarget.c ****             return (DEBUG_PORT->DAT);
 370              		.loc 1 471 0
 371 0012 034B     		ldr	r3, .L34
 372 0014 1B68     		ldr	r3, [r3]
 373 0016 5BB2     		sxtb	r3, r3
 472:../system/src/retarget.c ****         }
 473:../system/src/retarget.c ****     }
 474:../system/src/retarget.c **** 
 475:../system/src/retarget.c **** #endif
 476:../system/src/retarget.c **** }
 374              		.loc 1 476 0
 375 0018 1800     		movs	r0, r3
 376 001a BD46     		mov	sp, r7
 377              		@ sp needed
 378 001c 80BD     		pop	{r7, pc}
 379              	.L35:
 380 001e C046     		.align	2
 381              	.L34:
 382 0020 00000750 		.word	1342636032
 383              		.cfi_endproc
 384              	.LFE93:
 386              		.section	.text.kbhit,"ax",%progbits
 387              		.align	1
 388              		.global	kbhit
 389              		.syntax unified
 390              		.code	16
 391              		.thumb_func
 392              		.fpu softvfp
 394              	kbhit:
 395              	.LFB94:
 477:../system/src/retarget.c **** 
 478:../system/src/retarget.c **** /**
 479:../system/src/retarget.c ****  * @brief    Check any char input from UART
 480:../system/src/retarget.c ****  *
 481:../system/src/retarget.c ****  * @param    None
 482:../system/src/retarget.c ****  *
 483:../system/src/retarget.c ****  * @retval   1: No any char input
 484:../system/src/retarget.c ****  * @retval   0: Have some char input
 485:../system/src/retarget.c ****  *
 486:../system/src/retarget.c ****  * @details  Check UART RSR RX EMPTY or not to determine if any char input from UART
 487:../system/src/retarget.c ****  */
 488:../system/src/retarget.c **** 
 489:../system/src/retarget.c **** int kbhit(void)
 490:../system/src/retarget.c **** {
 396              		.loc 1 490 0
 397              		.cfi_startproc
 398              		@ args = 0, pretend = 0, frame = 0
 399              		@ frame_needed = 1, uses_anonymous_args = 0
 400 0000 80B5     		push	{r7, lr}
 401              	.LCFI17:
 402              		.cfi_def_cfa_offset 8
 403              		.cfi_offset 7, -8
 404              		.cfi_offset 14, -4
 405 0002 00AF     		add	r7, sp, #0
 406              	.LCFI18:
 407              		.cfi_def_cfa_register 7
 491:../system/src/retarget.c ****     return !((DEBUG_PORT->FIFOSTS & UART_FIFOSTS_RXEMPTY_Msk) == 0);
 408              		.loc 1 491 0
 409 0004 054B     		ldr	r3, .L38
 410 0006 9B69     		ldr	r3, [r3, #24]
 411 0008 44F20002 		movw	r2, #16384
 412 000c 1340     		ands	r3, r2
 413 000e 5A1E     		subs	r2, r3, #1
 414 0010 9341     		sbcs	r3, r3, r2
 415 0012 DBB2     		uxtb	r3, r3
 492:../system/src/retarget.c **** }
 416              		.loc 1 492 0
 417 0014 1800     		movs	r0, r3
 418 0016 BD46     		mov	sp, r7
 419              		@ sp needed
 420 0018 80BD     		pop	{r7, pc}
 421              	.L39:
 422 001a C046     		.align	2
 423              	.L38:
 424 001c 00000750 		.word	1342636032
 425              		.cfi_endproc
 426              	.LFE94:
 428              		.section	.text.IsDebugFifoEmpty,"ax",%progbits
 429              		.align	1
 430              		.global	IsDebugFifoEmpty
 431              		.syntax unified
 432              		.code	16
 433              		.thumb_func
 434              		.fpu softvfp
 436              	IsDebugFifoEmpty:
 437              	.LFB95:
 493:../system/src/retarget.c **** /**
 494:../system/src/retarget.c ****  * @brief    Check if debug message finished
 495:../system/src/retarget.c ****  *
 496:../system/src/retarget.c ****  * @param    None
 497:../system/src/retarget.c ****  *
 498:../system/src/retarget.c ****  * @retval   1: Message is finished
 499:../system/src/retarget.c ****  * @retval   0: Message is transmitting.
 500:../system/src/retarget.c ****  *
 501:../system/src/retarget.c ****  * @details  Check if message finished (FIFO empty of debug port)
 502:../system/src/retarget.c ****  */
 503:../system/src/retarget.c **** 
 504:../system/src/retarget.c **** int IsDebugFifoEmpty(void)
 505:../system/src/retarget.c **** {
 438              		.loc 1 505 0
 439              		.cfi_startproc
 440              		@ args = 0, pretend = 0, frame = 0
 441              		@ frame_needed = 1, uses_anonymous_args = 0
 442 0000 80B5     		push	{r7, lr}
 443              	.LCFI19:
 444              		.cfi_def_cfa_offset 8
 445              		.cfi_offset 7, -8
 446              		.cfi_offset 14, -4
 447 0002 00AF     		add	r7, sp, #0
 448              	.LCFI20:
 449              		.cfi_def_cfa_register 7
 506:../system/src/retarget.c ****     return ((DEBUG_PORT->FIFOSTS & UART_FIFOSTS_TXEMPTYF_Msk) != 0);
 450              		.loc 1 506 0
 451 0004 054B     		ldr	r3, .L42
 452 0006 9A69     		ldr	r2, [r3, #24]
 453 0008 8023     		movs	r3, #128
 454 000a 5B05     		lsls	r3, r3, #21
 455 000c 1340     		ands	r3, r2
 456 000e 5A1E     		subs	r2, r3, #1
 457 0010 9341     		sbcs	r3, r3, r2
 458 0012 DBB2     		uxtb	r3, r3
 507:../system/src/retarget.c **** }
 459              		.loc 1 507 0
 460 0014 1800     		movs	r0, r3
 461 0016 BD46     		mov	sp, r7
 462              		@ sp needed
 463 0018 80BD     		pop	{r7, pc}
 464              	.L43:
 465 001a C046     		.align	2
 466              	.L42:
 467 001c 00000750 		.word	1342636032
 468              		.cfi_endproc
 469              	.LFE95:
 471              		.section	.text._ttywrch,"ax",%progbits
 472              		.align	1
 473              		.global	_ttywrch
 474              		.syntax unified
 475              		.code	16
 476              		.thumb_func
 477              		.fpu softvfp
 479              	_ttywrch:
 480              	.LFB96:
 508:../system/src/retarget.c **** 
 509:../system/src/retarget.c **** /**
 510:../system/src/retarget.c ****  * @brief    C library retargetting
 511:../system/src/retarget.c ****  *
 512:../system/src/retarget.c ****  * @param[in]  ch  Write a character data
 513:../system/src/retarget.c ****  *
 514:../system/src/retarget.c ****  * @returns  None
 515:../system/src/retarget.c ****  *
 516:../system/src/retarget.c ****  * @details  Check if message finished (FIFO empty of debug port)
 517:../system/src/retarget.c ****  */
 518:../system/src/retarget.c **** 
 519:../system/src/retarget.c **** void _ttywrch(int ch)
 520:../system/src/retarget.c **** {
 481              		.loc 1 520 0
 482              		.cfi_startproc
 483              		@ args = 0, pretend = 0, frame = 8
 484              		@ frame_needed = 1, uses_anonymous_args = 0
 485 0000 80B5     		push	{r7, lr}
 486              	.LCFI21:
 487              		.cfi_def_cfa_offset 8
 488              		.cfi_offset 7, -8
 489              		.cfi_offset 14, -4
 490 0002 82B0     		sub	sp, sp, #8
 491              	.LCFI22:
 492              		.cfi_def_cfa_offset 16
 493 0004 00AF     		add	r7, sp, #0
 494              	.LCFI23:
 495              		.cfi_def_cfa_register 7
 496 0006 7860     		str	r0, [r7, #4]
 521:../system/src/retarget.c ****     SendChar(ch);
 497              		.loc 1 521 0
 498 0008 7B68     		ldr	r3, [r7, #4]
 499 000a 1800     		movs	r0, r3
 500 000c FFF7FEFF 		bl	SendChar
 522:../system/src/retarget.c ****     return;
 501              		.loc 1 522 0
 502 0010 C046     		nop
 523:../system/src/retarget.c **** }
 503              		.loc 1 523 0
 504 0012 BD46     		mov	sp, r7
 505 0014 02B0     		add	sp, sp, #8
 506              		@ sp needed
 507 0016 80BD     		pop	{r7, pc}
 508              		.cfi_endproc
 509              	.LFE96:
 511              		.section	.text.fputc,"ax",%progbits
 512              		.align	1
 513              		.global	fputc
 514              		.syntax unified
 515              		.code	16
 516              		.thumb_func
 517              		.fpu softvfp
 519              	fputc:
 520              	.LFB97:
 524:../system/src/retarget.c **** 
 525:../system/src/retarget.c **** 
 526:../system/src/retarget.c **** /**
 527:../system/src/retarget.c ****  * @brief      Write character to stream
 528:../system/src/retarget.c ****  *
 529:../system/src/retarget.c ****  * @param[in]  ch       Character to be written. The character is passed as its int promotion.
 530:../system/src/retarget.c ****  * @param[in]  stream   Pointer to a FILE object that identifies the stream where the character is 
 531:../system/src/retarget.c ****  *
 532:../system/src/retarget.c ****  * @returns    If there are no errors, the same character that has been written is returned.
 533:../system/src/retarget.c ****  *             If an error occurs, EOF is returned and the error indicator is set (see ferror).
 534:../system/src/retarget.c ****  *
 535:../system/src/retarget.c ****  * @details    Writes a character to the stream and advances the position indicator.\n
 536:../system/src/retarget.c ****  *             The character is written at the current position of the stream as indicated \n
 537:../system/src/retarget.c ****  *             by the internal position indicator, which is then advanced one character.
 538:../system/src/retarget.c ****  *
 539:../system/src/retarget.c ****  * @note       The above descriptions are copied from http://www.cplusplus.com/reference/clibrary/c
 540:../system/src/retarget.c ****  *
 541:../system/src/retarget.c ****  *
 542:../system/src/retarget.c ****  */
 543:../system/src/retarget.c **** 
 544:../system/src/retarget.c **** int fputc(int ch, FILE *stream)
 545:../system/src/retarget.c **** {
 521              		.loc 1 545 0
 522              		.cfi_startproc
 523              		@ args = 0, pretend = 0, frame = 8
 524              		@ frame_needed = 1, uses_anonymous_args = 0
 525 0000 80B5     		push	{r7, lr}
 526              	.LCFI24:
 527              		.cfi_def_cfa_offset 8
 528              		.cfi_offset 7, -8
 529              		.cfi_offset 14, -4
 530 0002 82B0     		sub	sp, sp, #8
 531              	.LCFI25:
 532              		.cfi_def_cfa_offset 16
 533 0004 00AF     		add	r7, sp, #0
 534              	.LCFI26:
 535              		.cfi_def_cfa_register 7
 536 0006 7860     		str	r0, [r7, #4]
 537 0008 3960     		str	r1, [r7]
 546:../system/src/retarget.c ****     SendChar(ch);
 538              		.loc 1 546 0
 539 000a 7B68     		ldr	r3, [r7, #4]
 540 000c 1800     		movs	r0, r3
 541 000e FFF7FEFF 		bl	SendChar
 547:../system/src/retarget.c ****     return ch;
 542              		.loc 1 547 0
 543 0012 7B68     		ldr	r3, [r7, #4]
 548:../system/src/retarget.c **** }
 544              		.loc 1 548 0
 545 0014 1800     		movs	r0, r3
 546 0016 BD46     		mov	sp, r7
 547 0018 02B0     		add	sp, sp, #8
 548              		@ sp needed
 549 001a 80BD     		pop	{r7, pc}
 550              		.cfi_endproc
 551              	.LFE97:
 553              		.section	.text.fgetc,"ax",%progbits
 554              		.align	1
 555              		.global	fgetc
 556              		.syntax unified
 557              		.code	16
 558              		.thumb_func
 559              		.fpu softvfp
 561              	fgetc:
 562              	.LFB98:
 549:../system/src/retarget.c **** 
 550:../system/src/retarget.c **** 
 551:../system/src/retarget.c **** /**
 552:../system/src/retarget.c ****  * @brief      Get character from UART debug port or semihosting input
 553:../system/src/retarget.c ****  *
 554:../system/src/retarget.c ****  * @param[in]  stream   Pointer to a FILE object that identifies the stream on which the operation 
 555:../system/src/retarget.c ****  *
 556:../system/src/retarget.c ****  * @returns    The character read from UART debug port or semihosting
 557:../system/src/retarget.c ****  *
 558:../system/src/retarget.c ****  * @details    For get message from debug port or semihosting.
 559:../system/src/retarget.c ****  *
 560:../system/src/retarget.c ****  */
 561:../system/src/retarget.c **** 
 562:../system/src/retarget.c **** int fgetc(FILE *stream)
 563:../system/src/retarget.c **** {
 563              		.loc 1 563 0
 564              		.cfi_startproc
 565              		@ args = 0, pretend = 0, frame = 8
 566              		@ frame_needed = 1, uses_anonymous_args = 0
 567 0000 80B5     		push	{r7, lr}
 568              	.LCFI27:
 569              		.cfi_def_cfa_offset 8
 570              		.cfi_offset 7, -8
 571              		.cfi_offset 14, -4
 572 0002 82B0     		sub	sp, sp, #8
 573              	.LCFI28:
 574              		.cfi_def_cfa_offset 16
 575 0004 00AF     		add	r7, sp, #0
 576              	.LCFI29:
 577              		.cfi_def_cfa_register 7
 578 0006 7860     		str	r0, [r7, #4]
 564:../system/src/retarget.c ****     return (GetChar());
 579              		.loc 1 564 0
 580 0008 FFF7FEFF 		bl	GetChar
 581 000c 0300     		movs	r3, r0
 565:../system/src/retarget.c **** }
 582              		.loc 1 565 0
 583 000e 1800     		movs	r0, r3
 584 0010 BD46     		mov	sp, r7
 585 0012 02B0     		add	sp, sp, #8
 586              		@ sp needed
 587 0014 80BD     		pop	{r7, pc}
 588              		.cfi_endproc
 589              	.LFE98:
 591              		.text
 592              	.Letext0:
 593              		.file 2 "c:\\program files\\gnu tools arm embedded\\6.2 2016q4\\arm-none-eabi\\include\\machine\\_
 594              		.file 3 "c:\\program files\\gnu tools arm embedded\\6.2 2016q4\\arm-none-eabi\\include\\sys\\lock.
 595              		.file 4 "c:\\program files\\gnu tools arm embedded\\6.2 2016q4\\arm-none-eabi\\include\\sys\\_type
 596              		.file 5 "c:\\program files\\gnu tools arm embedded\\6.2 2016q4\\lib\\gcc\\arm-none-eabi\\6.2.1\\in
 597              		.file 6 "c:\\program files\\gnu tools arm embedded\\6.2 2016q4\\arm-none-eabi\\include\\sys\\reent
 598              		.file 7 "c:\\program files\\gnu tools arm embedded\\6.2 2016q4\\arm-none-eabi\\include\\sys\\_stdi
 599              		.file 8 "c:\\program files\\gnu tools arm embedded\\6.2 2016q4\\arm-none-eabi\\include\\stdio.h"
 600              		.file 9 "../system/include/DEVICE/system_TC8234.h"
 601              		.file 10 "../system/include/DEVICE/TC8234.h"
DEFINED SYMBOLS
                            *ABS*:00000000 retarget.c
                            *COM*:00000068 __stdout
                            *COM*:00000068 __stdin
C:\Users\CCMA\AppData\Local\Temp\ccdFsCP6.s:18     .rodata:00000000 $d
C:\Users\CCMA\AppData\Local\Temp\ccdFsCP6.s:22     .text.Hard_Fault_Handler:00000000 $t
C:\Users\CCMA\AppData\Local\Temp\ccdFsCP6.s:29     .text.Hard_Fault_Handler:00000000 Hard_Fault_Handler
C:\Users\CCMA\AppData\Local\Temp\ccdFsCP6.s:58     .text.Hard_Fault_Handler:00000014 $d
C:\Users\CCMA\AppData\Local\Temp\ccdFsCP6.s:63     .text.SendChar_ToUART:00000000 $t
C:\Users\CCMA\AppData\Local\Temp\ccdFsCP6.s:70     .text.SendChar_ToUART:00000000 SendChar_ToUART
C:\Users\CCMA\AppData\Local\Temp\ccdFsCP6.s:132    .text.SendChar_ToUART:00000044 $d
C:\Users\CCMA\AppData\Local\Temp\ccdFsCP6.s:137    .text._write:00000000 $t
C:\Users\CCMA\AppData\Local\Temp\ccdFsCP6.s:144    .text._write:00000000 _write
C:\Users\CCMA\AppData\Local\Temp\ccdFsCP6.s:199    .text._read:00000000 $t
C:\Users\CCMA\AppData\Local\Temp\ccdFsCP6.s:206    .text._read:00000000 _read
C:\Users\CCMA\AppData\Local\Temp\ccdFsCP6.s:297    .text._read:00000070 $d
C:\Users\CCMA\AppData\Local\Temp\ccdFsCP6.s:302    .text.SendChar:00000000 $t
C:\Users\CCMA\AppData\Local\Temp\ccdFsCP6.s:309    .text.SendChar:00000000 SendChar
C:\Users\CCMA\AppData\Local\Temp\ccdFsCP6.s:341    .text.GetChar:00000000 $t
C:\Users\CCMA\AppData\Local\Temp\ccdFsCP6.s:348    .text.GetChar:00000000 GetChar
C:\Users\CCMA\AppData\Local\Temp\ccdFsCP6.s:382    .text.GetChar:00000020 $d
C:\Users\CCMA\AppData\Local\Temp\ccdFsCP6.s:387    .text.kbhit:00000000 $t
C:\Users\CCMA\AppData\Local\Temp\ccdFsCP6.s:394    .text.kbhit:00000000 kbhit
C:\Users\CCMA\AppData\Local\Temp\ccdFsCP6.s:424    .text.kbhit:0000001c $d
C:\Users\CCMA\AppData\Local\Temp\ccdFsCP6.s:429    .text.IsDebugFifoEmpty:00000000 $t
C:\Users\CCMA\AppData\Local\Temp\ccdFsCP6.s:436    .text.IsDebugFifoEmpty:00000000 IsDebugFifoEmpty
C:\Users\CCMA\AppData\Local\Temp\ccdFsCP6.s:467    .text.IsDebugFifoEmpty:0000001c $d
C:\Users\CCMA\AppData\Local\Temp\ccdFsCP6.s:472    .text._ttywrch:00000000 $t
C:\Users\CCMA\AppData\Local\Temp\ccdFsCP6.s:479    .text._ttywrch:00000000 _ttywrch
C:\Users\CCMA\AppData\Local\Temp\ccdFsCP6.s:512    .text.fputc:00000000 $t
C:\Users\CCMA\AppData\Local\Temp\ccdFsCP6.s:519    .text.fputc:00000000 fputc
C:\Users\CCMA\AppData\Local\Temp\ccdFsCP6.s:554    .text.fgetc:00000000 $t
C:\Users\CCMA\AppData\Local\Temp\ccdFsCP6.s:561    .text.fgetc:00000000 fgetc
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.087e176d0399834c705147ed10b7207a
                           .group:00000000 wm4._newlib_version.h.4.ad342815780c8db09778091a421b5b5b
                           .group:00000000 wm4.newlib.h.34.ade2dd58293cce3191e5024d8824a202
                           .group:00000000 wm4.features.h.22.5cdadbb3efe495d1c9e38350b8c376c7
                           .group:00000000 wm4.config.h.219.341816d1cc54601a0d2a3e284e3d034c
                           .group:00000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:00000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:00000000 wm4._default_types.h.6.959254cf5f09734ea7516c89e8bb21bd
                           .group:00000000 wm4.stddef.h.187.2ff233552538c6ff9b8575ca8ea52cb3
                           .group:00000000 wm4.cdefs.h.47.d472b786fad7f248e8524f569f3d5350
                           .group:00000000 wm4.stddef.h.39.ec95e8feac892e292b69dc7ae75b0d64
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:00000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:00000000 wm4._types.h.183.c226d164ceca1f2ecb9ae9360c54a098
                           .group:00000000 wm4.reent.h.17.5c31af1d4f47d2ada260e08fff34fcec
                           .group:00000000 wm4.assert.h.11.db24e541f16414db224bf986d21017e2
                           .group:00000000 wm4.reent.h.460.578a1080094974ec74f6c48bcf356980
                           .group:00000000 wm4.types.h.40.e8c16e7ec36ba55f133d0616070e25fc
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4._endian.h.31.65a10590763c3dde1ac4a7f66d7d4891
                           .group:00000000 wm4.endian.h.9.49f3a4695c1b61e8a0808de3c4a106cb
                           .group:00000000 wm4._timeval.h.30.0e8bfd94e85db17dda3286ee81496fe6
                           .group:00000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:00000000 wm4.select.h.30.bbece7fa40993a78092dcc5805132560
                           .group:00000000 wm4.types.h.69.ed3eae3cf73030a737515151ebcab7a1
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.81.e75815e468af71def73c328e3aabfd80
                           .group:00000000 wm4.TC8234.h.41.e8307e65782f050acdedaa1c99902eda
                           .group:00000000 wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.core_cm23.h.64.de3bc139a6604757cb96382033d22ea4
                           .group:00000000 wm4.cmsis_gcc.h.26.41038879cf168e2c536d47f29b7e8dd8
                           .group:00000000 wm4.core_cm23.h.125.ba48219c7506089842d5c01f4f336b70
                           .group:00000000 wm4.system_TC8234.h.13.5aa1165126f7ad438a96056b8f9767cd
                           .group:00000000 wm4.TC8234.h.489.097065e3a879549c91dbff33e7fde3c1
                           .group:00000000 wm4.sys.h.13.e2db55f2643ef5a4b9e5848a3c47eacf
                           .group:00000000 wm4.clk.h.13.344c384269bede121fbfa7337007cf2d
                           .group:00000000 wm4.uart.h.12.31952ad1e577cb5eb9dad9ec3ec13b6a

UNDEFINED SYMBOLS
puts
